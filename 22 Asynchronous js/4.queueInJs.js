//1 Callback queue - Task Queue
setTimeout(() => {console.log('1', 'is the loneliest numkber')}, 0)
setTimeout(() => {console.log('2', 'can be as bad as one')}, 10)

//2 Job Queue - Microtask Queue
Promise.resolve('hi').then((data) => console.log('2', data))

// 3
console.log('3','is a crowd');




/**
 * üß† JavaScript Event Loop ‚Äì Short Notes

1Ô∏è‚É£ Call Stack
‚Ä¢ Executes synchronous code line by line.
‚Ä¢ Example: console.log()
‚Ä¢ Runs first before any asynchronous task.

2Ô∏è‚É£ Callback Queue (Macro Task Queue / Task Queue)
‚Ä¢ Stores callbacks from:
  - setTimeout()
  - setInterval()
  - setImmediate() (Node.js)
  - DOM events
‚Ä¢ Executes after all synchronous and microtasks complete.
‚Ä¢ Event loop picks one macro task ‚Üí runs it ‚Üí then checks microtasks again.

3Ô∏è‚É£ Microtask Queue (Job Queue)
‚Ä¢ Contains high-priority async callbacks like:
  - Promise.then(), Promise.catch(), Promise.finally()
  - process.nextTick() (Node.js)
‚Ä¢ Runs immediately after synchronous code, before any setTimeout.

4Ô∏è‚É£ Event Loop Execution Order
1. Run all synchronous code (Call Stack)
2. Run all microtasks (Promises, nextTick)
3. Run one macro task (setTimeout, setInterval)
4. Repeat the cycle

5Ô∏è‚É£ Example Code
setTimeout(() => console.log('1', 'is the loneliest number'), 0);
setTimeout(() => console.log('2', 'can be as bad as one'), 10);
Promise.resolve('hi').then(data => console.log('2', data));
console.log('3', 'is a crowd');

6Ô∏è‚É£ Execution Order
3 is a crowd                // synchronous
2 hi                        // microtask (Promise)
1 is the loneliest number   // first setTimeout
2 can be as bad as one      // second setTimeout

7Ô∏è‚É£ Summary Table
Type | Queue Name | Examples | When It Runs
-----|-------------|-----------|---------------
Synchronous | Call Stack | console.log() | Immediately
Asynchronous (High Priority) | Microtask Queue | Promise.then() | After sync code
Asynchronous (Normal Priority) | Callback Queue / Macro Task Queue | setTimeout() | After microtasks

‚úÖ In short:
Sync ‚Üí Microtasks ‚Üí Macrotasks ‚Üí Repeat

 */