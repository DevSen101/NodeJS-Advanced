PM2 Zero Downtime Reload - Detailed Notes
-----------------------------------------

1. Introduction
---------------
- When a Node.js application is running in production using PM2, restarting it with normal commands
  (like `pm2 restart`) causes temporary downtime.
- During this time, the server becomes **unavailable to users**, as all processes stop and restart.
- PM2 provides a better solution called **Zero Downtime Reload**, which allows you to update or restart
  your application **without disconnecting users**.

---

2. Problem Scenario
-------------------
- Imagine you have a live PM2 cluster running multiple instances of your app:
  > pm2 start server.js -i max

- Now, you modify your server code (for example, changing a timer delay or a response message).
- After saving, the new code won’t be applied automatically — the running processes still use the old version.
- If you restart using:
  > pm2 restart server
  → The app will briefly go offline (downtime).

This can lead to a bad user experience, especially in production systems where **availability is critical**.

---

3. What Is Zero Downtime Reload?
--------------------------------
- **Zero Downtime Reload** (or graceful restart) means the server stays online while code changes are applied.
- PM2 restarts each process **one by one**, ensuring **at least one instance** is always running.
- Users experience **no downtime**, even during deployment or updates.

---

4. Command for Zero Downtime Reload
-----------------------------------
Syntax:
> pm2 reload <app-name>

Example:
> pm2 reload server

Key points:
- Use `reload`, not `restart`.
- Reload replaces old processes sequentially, not simultaneously.
- Keeps service live for users.

---

5. Behind the Scenes (How It Works)
-----------------------------------
When you run:
> pm2 reload server

PM2 performs these steps:
1. Picks one process at a time.
2. Spawns a new process with the updated code.
3. Waits for the new process to be fully online.
4. Terminates the old process.
5. Repeats for each instance.

✅ Result → Continuous uptime with seamless code update.

---

6. Monitoring Reload in Real-Time
---------------------------------
To observe the reload process, open PM2’s monitoring dashboard in a separate terminal:
> pm2 monit

During reload:
- You’ll see one process going offline at a time.
- Others continue serving traffic.
- CPU and memory metrics update in real time.
- Once reload completes, all processes show low uptime (indicating they restarted recently).

---

7. Example Workflow
-------------------
1. Start your app in cluster mode:
   > pm2 start server.js -i max --name server

2. Make code changes (e.g., change delay from 9s → 4s).

3. Save file and run:
   > pm2 reload server

4. Observe in `pm2 monit`:
   - Each process restarts one by one.
   - At least one process remains active.

5. Verify changes applied:
   - Send a request to the server.
   - It now responds according to updated logic.

---

8. Real Example
---------------
Before reload:
> Request → takes 9 seconds  
After reload (zero downtime):
> Request → takes 4 seconds  

✅ Users never see any downtime or "Service Unavailable" message.  
✅ Updated code is live instantly.

---

9. Benefits of Zero Downtime Reload
-----------------------------------
- **No user disruption:** App remains live during updates.
- **Seamless deployment:** Ideal for CI/CD pipelines.
- **Automatic process management:** PM2 ensures one process is always available.
- **Scalable:** Works efficiently with multi-core clusters.
- **Safe updates:** Each worker reloads gracefully, avoiding abrupt disconnects.

---

10. PM2 Reload vs Restart
-------------------------
| Command            | Behavior                               | Downtime | Recommended Use                  |
|--------------------|----------------------------------------|-----------|----------------------------------|
| `pm2 restart app`  | Stops all processes, then restarts all | ❌ Yes    | For development or quick fix     |
| `pm2 reload app`   | Reloads one process at a time          | ✅ No     | For production (zero downtime)   |

---

11. Best Practices
------------------
- Always use `pm2 reload` for production updates.
- Combine with:
  > pm2 save  
  → Saves the current process list.

  > pm2 startup  
  → Ensures PM2 auto-starts your apps after reboot.

- For continuous deployment:
  - Use reload in your CI/CD scripts after each code push.
  - Example (in deployment script):
    ```
    git pull origin main
    npm install
    pm2 reload all
    ```

---

12. Summary
-----------
✅ **Zero Downtime Reload** allows updating live Node.js apps **without interrupting users**.  
✅ It is achieved using the `pm2 reload` command.  
✅ PM2 restarts each process sequentially while keeping the service available.  
✅ Essential for production-grade applications, APIs, and CI/CD deployments.

In short:
> `pm2 reload` = Update your live app instantly with **no downtime**, **no user loss**, and **no errors**.
