RESTful API - Notes

1. REST (Representational State Transfer) is a design pattern for building APIs using HTTP.
   APIs that follow REST are called RESTful APIs.

2. REST uses existing web standards like:
   - HTTP methods (GET, POST, PUT, DELETE)
   - URLs (endpoints)
   - Content types (like JSON)

3. Endpoints:
   - Use plural nouns (e.g., /friends, /messages)
   - Represent collections of data on the server
   - Each item can be accessed using an ID (e.g., /friends/1)

4. HTTP Methods:
   - GET: Retrieve data
   - POST: Add new data
   - PUT: Update data
   - DELETE: Remove data

5. REST API works on Client-Server architecture:
   - Client handles UI and user actions.
   - Server handles data storage and logic.
   - They communicate using HTTP requests and responses.

6. Stateless:
   - Each request is independent and contains all needed information.
   - Server doesnâ€™t store client session data.
   - Makes APIs faster, simpler, and cacheable.

7. Cacheable:
   - Since requests are independent, responses can be stored and reused.
   - Reduces server load and improves performance.

8. Data Format:
   - Usually JSON is used to transfer data between client and server.
   - Defined using the Content-Type header.

9. REST vs RPC:
   - RPC (Remote Procedure Call) treated server like a local function.
   - REST focuses on resources (data) instead of functions.
   - REST became standard because it fits how the web works.

10. Best Practices:
    - Use plural resource names (/users, /posts)
    - Use proper HTTP methods
    - Keep APIs stateless
    - Send and receive data in JSON
    - Avoid custom endpoints like /createNewFriend; instead use POST /friends

Summary:
RESTful APIs organize data as resources accessed through URLs.
They use HTTP methods to perform actions and keep requests stateless, cacheable, and easy to maintain.
